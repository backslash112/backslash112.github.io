---
layout: post
title:  "DP"
date:  2019-04-12
description: ""
img: dp.png
tags: [dp]
---

## Reading Resource
### [topcoder/dynamic-programming-from-novice-to-advanced](https://www.topcoder.com/community/competitive-programming/tutorials/dynamic-programming-from-novice-to-advanced/)
- "State"
- Note that in most cases the states rely on lower states and are independent from greater states.
- Each time a better solution is found, the results are updated.
- How to find the "State"ï¼Ÿ
  - First of all we mark that for state 0. (from the init state.)
  - From left to right. (low -> high)
- How to write the pseudocode?
  - Use for-loop
  - For each case, use another inner-for-loop. (coins like 1, 3 and 5, or directions like up and right).

```js
// Find the longest non-decreasing sequece.

/**
 Pseudocode:
set Max[i] equal to 1 from all of i of N
For i = 1 to N - 1
  For j = 0 to N - 1
    If (Vj < Vi AND Max[j] + 1 > Max[i])
      Then Max[i] = Max[j] + 1
Output max value of Max
*/

function li(arr) {
  const n = arr.length;
  const max = Array(n).fill(1);
  for (let i = 1; i < n; i++) {
    for (let j = 0; j < i; j++) {
      if (arr[j] < arr[i] && max[j] + 1 > max[i]) {
        max[i] = max[j] + 1;
      }
    }
  }
  return Math.max(...max);
}
```
## What is DP?
- Dynamic programming is a technique used to avoid computing multiple time the same subproblem in a recursive algorithm.([stackoverflow](https://stackoverflow.com/a/29149754/2195426))

- Top Down - Memoization: use cache.
- Bottom Up - Find the right order to evaluate the results so that partial results are available when needed.

## How apply dynamic programming?
- Find the recursion in the problem.

## Example: fibonacci
```js
// recursion
function f(n) {
  if (n === 0 || n === 1) {
    return n;
  }
  return f(n - 1) + f(n - 2);
}

// top down with cache
const cache = [];
function f1(n) {
  if (n === 0 || n === 1) {
    return n;
  }
  if (cache[n]) {
    return cache[n];
  }
  const val = f1(n - 1) + f1(n - 2);
  cache[n] = val;
  return val;
}

// bottom up
function f2(n) {
  let res = 0;
  let x = 0;
  let y = 1;
  for (let i = 2; i < n; i++) {
    res = x + y;
    x, y = y, res;
  }
  return res;
}
console.time('f');
console.log(f(40));
console.timeEnd('f');

console.time('f1');
console.log(f1(40));
console.timeEnd('f1')

console.time('f2');
console.log(f1(40));
console.timeEnd('f2')
```